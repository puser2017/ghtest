{
	"workspace": {
		"-tabs-2": {
			"tabname": "git - ddl",
			"query": {
				"useQueryCache": false,
				"destinationTable": {
					"projectId": "p",
					"datasetId": "d",
					"tableId": "t"
				},
				"writeDisposition": "WRITE_APPEND",
				"useLegacySql": false,
				"querytext": "--https://cloud.google.com/bigquery/docs/data-definition-language#creating_a_new_table_from_an_existing_table
					##bq
					#standardSQL
					--Creating a new table
					CREATE TABLE `formal-cascade-571.temp.tmp_sm_ddl1`
					(
					 x INT64 OPTIONS(description=\"An optional INTEGER field\"),
					 y STRUCT<
						 a ARRAY<STRING> OPTIONS(description=\"A repeated STRING field\"),
						 b BOOL
					 >
					)
					PARTITION BY DATE(_PARTITIONTIME)
					OPTIONS(
					 expiration_timestamp=TIMESTAMP \"2020-01-01 00:00:00 UTC\",
					 partition_expiration_days=1,
					 description=\"a table that expires in 2020, with each partition living for 24 hours\",
					 labels=[(\"org_unit\", \"development\")]
					)
					
					##bq
					#standardSQL
					--Creating a new table from an existing table
					CREATE TABLE `formal-cascade-571.temp.tmp_sm_ddl2`
					OPTIONS(
					 description=\"Top ten words per Shakespeare corpus\"
					) AS
					SELECT
					 corpus,
					 ARRAY_AGG(STRUCT(word, word_count) ORDER BY word_count DESC LIMIT 10) AS top_words
					FROM `bigquery-public-data.samples.shakespeare`
					GROUP BY corpus; 
					 
					 
					##bq
					#standardSQL
					-- Creating a table only if the table doesn't exist
					CREATE TABLE IF NOT EXISTS  `formal-cascade-571.temp.tmp_sm_ddl2` (x INT64, y STRUCT<a ARRAY<STRING>, b BOOL>)
					OPTIONS(
					 expiration_timestamp=TIMESTAMP \"2020-01-01 00:00:00 UTC\",
					 description=\"a table that expires in 2020\",
					 labels=[(\"org_unit\", \"development\")]
					)
					
					##bq
					#standardSQL
					-- Creating or replacing a table
					CREATE OR REPLACE TABLE `formal-cascade-571.temp.tmp_sm_ddl3` (x INT64, y STRUCT<a ARRAY<STRING>, b BOOL>)
					OPTIONS(
					 expiration_timestamp=TIMESTAMP \"2020-01-01 00:00:00 UTC\",
					 description=\"a table that expires in 2020\",
					 labels=[(\"org_unit\", \"development\")]
					)
					
					##bq
					#standardSQL
					-- Creating a table with REQUIRED columns
					CREATE TABLE `formal-cascade-571.temp.tmp_sm_ddl4` (
					 x INT64 NOT NULL,
					 y STRUCT<
						 a ARRAY<STRING>,
						 b BOOL NOT NULL,
						 c FLOAT64
					 > NOT NULL,
					 z STRING
					)
					 
					##bq
					#standardSQL
					--Creating a partitioned table
					CREATE TABLE `formal-cascade-571.temp.tmp_sm_ddl5` (transaction_id INT64, transaction_date DATE)
					PARTITION BY transaction_date
					OPTIONS(
					 partition_expiration_days=3,
					 description=\"a table partitioned by transaction_date\"
					)
					
					##bq
					#standardSQL
					--Creating a partitioned table from the result of a query
					CREATE TABLE `formal-cascade-571.temp.tmp_sm_ddl6`
					PARTITION BY date
					OPTIONS (
					 partition_expiration_days=365,
					 description=\"weather stations with precipitation, partitioned by day\"
					) AS
					SELECT
					 DATE(CAST(year AS INT64), CAST(mo AS INT64), CAST(da AS INT64)) AS date,
					 (SELECT ANY_VALUE(name) FROM `bigquery-public-data.noaa_gsod.stations` AS stations
						WHERE stations.usaf = stn) AS station_name,  -- Stations may have multiple names
					 prcp
					FROM `bigquery-public-data.noaa_gsod.gsod2017` AS weather
					WHERE prcp != 99.9  -- Filter unknown values
					 AND prcp > 0      -- Filter stations/days with no precipitation
					
					##bq
					-- Creating a new view
					#standardSQL
					CREATE VIEW `formal-cascade-571.temp.tmp_sm_ddl_v1`
					OPTIONS(
					 expiration_timestamp=TIMESTAMP_ADD(CURRENT_TIMESTAMP(), INTERVAL 48 HOUR),
					 friendly_name=\"newview\",
					 description=\"a view that expires in 2 days\",
					 labels=[(\"org_unit\", \"development\")]
					)
					AS SELECT 'column_1' as c1, 'column_2' as c2, 'column_3' as c3
					
					##bq
					-- Creating a view only if the view doesn't exist
					#standardSQL
					CREATE VIEW IF NOT EXISTS `formal-cascade-571.temp.tmp_sm_ddl_v1`
					OPTIONS(
					 expiration_timestamp=TIMESTAMP_ADD(CURRENT_TIMESTAMP(), INTERVAL 48 HOUR),
					 friendly_name=\"newview\",
					 description=\"a view that expires in 2 days\",
					 labels=[(\"org_unit\", \"development\")]
					)
					AS SELECT 'column_1' as c1, 'column_2' as c2, 'column_3' as c3
					
					##bq
					-- Creating or replacing a view
					#standardSQL
					CREATE OR REPLACE VIEW `formal-cascade-571.temp.tmp_sm_ddl_v1`
					OPTIONS(
					 expiration_timestamp=TIMESTAMP_ADD(CURRENT_TIMESTAMP(), INTERVAL 48 HOUR),
					 friendly_name=\"newview\",
					 description=\"a view that expires in 1 days\",
					 labels=[(\"org_unit\", \"development\")]
					)
					AS SELECT 'column_1' as c1, 'column_2' as c2, 'column_3' as c3
					
					##bq
					-- Deleting a table
					DROP TABLE `formal-cascade-571.temp.tmp_sm_ddl1`
					
					##bq
					-- Deleting a table only if the table exists
					DROP TABLE IF EXISTS `formal-cascade-571.temp.tmp_sm_ddl1`
					
					##bq
					-- Deleting a view
					DROP VIEW `formal-cascade-571.temp.tmp_sm_ddl_v1`
					
					##bq
					-- Deleting a view only if the view exists
					DROP VIEW IF EXISTS `formal-cascade-571.temp.tmp_sm_ddl_v1`
					
					##bq
					-- models
					-- 
					#standardSQL
					CREATE MODEL `formal-cascade-571.temp.tmp_sm_natality_model2`
					OPTIONS
					  (model_type='linear_reg',
					    input_label_cols=['weight_pounds']) AS
					SELECT
					  weight_pounds,
					  is_male,
					  gestation_weeks,
					  mother_age,
					  CAST(mother_race AS string) AS mother_race
					FROM
					  `bigquery-public-data.samples.natality`
					WHERE
					  weight_pounds IS NOT NULL
					  AND RAND() < 0.001
					LIMIT 100
					
					##bq
					-- clean up
					drop table `formal-cascade-571.temp.tmp_sm_ddl`
					drop table `formal-cascade-571.temp.tmp_sm_ddl2`
					drop table `formal-cascade-571.temp.tmp_sm_ddl3`
					drop table `formal-cascade-571.temp.tmp_sm_ddl4`
					drop table `formal-cascade-571.temp.tmp_sm_ddl5`
					drop table `formal-cascade-571.temp.tmp_sm_ddl6`
					
					"
			},
			"options": {
				"mode": "standard",
				"autoUpdateSqlMode": false,
				"enhancedMode": false,
				"destinationTbl": "p.d.t",
				"retention": "",
				"retentionUnit": "days",
				"allowLargeResults": true,
				"flattenResults": true,
				"maximumBillingTier": "",
				"maximumBytes": "",
				"maximumBytesMultiplier": "3",
				"location": null
			}
		},
		"-tabs-3": {
			"tabname": "git - query3",
			"query": {
				"allowLargeResults": true,
				"flattenResults": false,
				"useQueryCache": false,
				"destinationTable": {
					"projectId": "p",
					"datasetId": "d",
					"tableId": "t2"
				},
				"writeDisposition": "WRITE_TRUNCATE",
				"useLegacySql": true,
				"maximumBytesBilled": 2199023255552,
				"querytext": "##bq
					WITH trips AS (
						select pickup_datetime, pickup_longitude, pickup_latitude, dropoff_longitude, dropoff_latitude
						FROM `bigquery-public-data.new_york.tlc_yellow_trips_2016`
						WHERE pickup_longitude IS NOT NULL
						AND pickup_latitude IS NOT NULL
						AND dropoff_longitude IS NOT NULL
						AND dropoff_longitude IS NOT NULL
						AND EXTRACT(MONTH FROM pickup_datetime) = 1
						LIMIT 100000
					)
					SELECT *
					FROM trips
					WHERE pickup_longitude >= -90 AND pickup_longitude < 91
					AND pickup_latitude >= -90 AND pickup_latitude < 91
					AND dropoff_longitude >= -90 AND dropoff_longitude < 91
					AND dropoff_latitude >= -90 AND dropoff_latitude < 91
					AND pickup_longitude != 0
					AND dropoff_longitude != 0
					
					##bq
					WITH geo AS (
						SELECT 
							'Pickup' AS pickup_desc
							,'Dropoff' AS dropoff_desc
						  ,pickup_longitude
							,ST_GEOGPOINT(pickup_longitude, pickup_latitude) as pickup
							,ST_GEOGPOINT(dropoff_longitude, dropoff_latitude) as dropoff
					--		,ST_MAKELINE(ST_GEOGPOINT(pickup_longitude, pickup_latitude), ST_GEOGPOINT(dropoff_longitude, dropoff_latitude)) As pd 
						--	,ST_CENTROID(ST_MAKELINE(ST_GEOGPOINT(pickup_longitude, pickup_latitude), ST_GEOGPOINT(dropoff_longitude, dropoff_latitude))) AS centroid
						  ,ST_DISTANCE(ST_GEOGPOINT(pickup_longitude, pickup_latitude), ST_GEOGPOINT(dropoff_longitude, dropoff_latitude)) AS distance
						FROM `formal-cascade-571.temp.tmp_sm_geo`
					)
					SELECT
					  pickup_desc
						,dropoff_desc
						,pickup
						,dropoff
						,ST_MAKELINE(pickup, dropoff) As pd
						,distance/100 AS d
						,IF(distance/100 > 100, '#FF0000', if(distance/100 < 80, '#38761D', '#0000FF')) AS distance
					FROM geo
					WHERE distance/100 > 5
					ORDER BY pickup_longitude
					
					"
			},
			"options": {
				"mode": "legacy",
				"autoUpdateSqlMode": true,
				"enhancedMode": false,
				"destinationTbl": "p.d.t2",
				"retention": "1",
				"retentionUnit": "hours",
				"maximumBillingTier": "",
				"maximumBytes": "2",
				"maximumBytesMultiplier": "4",
				"location": null
			}
		},
		"-tabs-4": {
			"tabname": "git - query2",
			"query": {
				"allowLargeResults": false,
				"flattenResults": true,
				"useQueryCache": false,
				"destinationTable": {
					"projectId": "p",
					"datasetId": "d",
					"tableId": "t3"
				},
				"writeDisposition": "WRITE_EMPTY",
				"useLegacySql": true,
				"maximumBytesBilled": 2251799813685248,
				"destinationEncryptionConfiguration": {
					"kmsKeyName": "xxx"
				},
				"querytext": "select a.zipcode, a.population
					from `bigquery-public-data.census_bureau_usa.population_by_zip_2010` a
					WHERE gender = ''
					ORDER bY 1
					
					
					##bq
					--33,119
					select a.zipcode, z.zipcode_geom, a.population
					from `bigquery-public-data.census_bureau_usa.population_by_zip_2010` a
					JOIN `bigquery-public-data.utility_us.zipcode_area` z
					ON z.zipcode = a.zipcode
					WHERE gender = ''
					ORDER bY 1
					
					##bq
					-- 13,013
					select a.zipcode, ST_GEOGFROMTEXT(za.zipcode_geom) AS zipcode_geom, a.population, ca.county_name, ca.county_geom
					from `bigquery-public-data.census_bureau_usa.population_by_zip_2010` a
					JOIN `bigquery-public-data.utility_us.zipcode_area` za
					ON za.zipcode = a.zipcode
					JOIN `bigquery-public-data.utility_us.us_county_area` ca
					ON ST_WITHIN(ST_GEOGFROMTEXT(za.zipcode_geom), ca.county_geom)
					WHERE gender = ''
					ORDER bY 1
					
					##bq
					-- 12,2936
					select a.zipcode, ST_GEOGFROMTEXT(za.zipcode_geom) AS zipcode_geom, a.population, ca.name, ca.csa_geom
					from `bigquery-public-data.census_bureau_usa.population_by_zip_2010` a
					JOIN `bigquery-public-data.utility_us.zipcode_area` za
					ON za.zipcode = a.zipcode
					JOIN `bigquery-public-data.utility_us.us_csa_area` ca
					ON ST_WITHIN(ST_GEOGFROMTEXT(za.zipcode_geom), ca.csa_geom)
					WHERE gender = ''
					ORDER bY 1
					
					##bq
					-- 14,880
					select a.zipcode, ST_GEOGFROMTEXT(za.zipcode_geom) AS zipcode_geom, a.population, ma.name, ma.msa_geom
					from `bigquery-public-data.census_bureau_usa.population_by_zip_2010` a
					JOIN `bigquery-public-data.utility_us.zipcode_area` za
					ON za.zipcode = a.zipcode
					JOIN `bigquery-public-data.utility_us.us_msa_area` ma
					ON ST_WITHIN(ST_GEOGFROMTEXT(za.zipcode_geom), ma.msa_geom)
					WHERE gender = ''
					ORDER bY 1
					
					##bq
					-- 29,474
					select a.zipcode, ST_GEOGFROMTEXT(za.zipcode_geom) AS zipcode_geom, a.population, sa.state_name, sa.state_geom
					from `bigquery-public-data.census_bureau_usa.population_by_zip_2010` a
					JOIN `bigquery-public-data.utility_us.zipcode_area` za
					ON za.zipcode = a.zipcode
					JOIN `bigquery-public-data.utility_us.us_states_area` sa
					ON ST_WITHIN(ST_GEOGFROMTEXT(za.zipcode_geom), sa.state_geom)
					WHERE gender = ''
					ORDER bY 1
					
					##bq
					
					"
			},
			"options": {
				"mode": "legacy",
				"autoUpdateSqlMode": true,
				"enhancedMode": false,
				"destinationTbl": "p.d.t3",
				"retention": "",
				"retentionUnit": "days",
				"maximumBillingTier": "",
				"maximumBytes": "2",
				"maximumBytesMultiplier": "5",
				"location": "us-west2"
			}
		},
		"-tabs-5": {
			"tabname": "git - query",
			"query": {
				"useQueryCache": false,
				"useLegacySql": false,
				"querytext": "##bq /* point */
					/*
					blue #0000ff 
					green #00ff00
					*/
					SELECT ST_GEOGPOINT(longitude, latitude) AS geo, name, if(RAND() < .5, '#0000ff', '#00ff00') AS color, RAND() * 2 AS size
					FROM `bigquery-public-data.new_york_citibike.citibike_stations`
					LIMIT 500
					
					##bq /* line */
					SELECT ST_MAKELINE(ST_GEOGPOINT(start_station_longitude, start_station_latitude), 
					  ST_GEOGPOINT(end_station_longitude, end_station_latitude)) AS start_end, 
						start_station_name, 
						end_station_name
					FROM `bigquery-public-data.new_york_citibike.citibike_trips`
					LIMIT 50
					
					##bq /* polygon */
					-- `bigquery-public-data.utility_us.us_states_area`
					
					##bq /* multiple points */
					SELECT ST_GEOGPOINT(start_station_longitude, start_station_latitude) AS start_geo, 
					  ST_GEOGPOINT(end_station_longitude, end_station_latitude) AS end_geo, 
						start_station_name, 
						end_station_name
					FROM `bigquery-public-data.new_york_citibike.citibike_trips`
					LIMIT 50
					
					
					
					"
			},
			"options": {
				"mode": "standard",
				"autoUpdateSqlMode": false,
				"enhancedMode": false,
				"destinationTbl": "",
				"writeDisposition": "WRITE_EMPTY",
				"retention": "",
				"retentionUnit": "days",
				"allowLargeResults": false,
				"flattenResults": true,
				"maximumBillingTier": "",
				"maximumBytes": "",
				"maximumBytesMultiplier": "3",
				"location": null
			}
		},
		"-tabs-7": {
			"tabname": "git - ddl(2)",
			"query": {
				"useQueryCache": false,
				"destinationTable": {
					"projectId": "p",
					"datasetId": "d",
					"tableId": "t"
				},
				"writeDisposition": "WRITE_APPEND",
				"useLegacySql": false,
				"querytext": "--https://cloud.google.com/bigquery/docs/data-definition-language#creating_a_new_table_from_an_existing_table
					##bq
					#standardSQL
					--Creating a new table
					CREATE TABLE `formal-cascade-571.temp.tmp_sm_ddl1`
					(
					 x INT64 OPTIONS(description=\"An optional INTEGER field\"),
					 y STRUCT<
						 a ARRAY<STRING> OPTIONS(description=\"A repeated STRING field\"),
						 b BOOL
					 >
					)
					PARTITION BY DATE(_PARTITIONTIME)
					OPTIONS(
					 expiration_timestamp=TIMESTAMP \"2020-01-01 00:00:00 UTC\",
					 partition_expiration_days=1,
					 description=\"a table that expires in 2020, with each partition living for 24 hours\",
					 labels=[(\"org_unit\", \"development\")]
					)
					
					##bq
					#standardSQL
					--Creating a new table from an existing table
					CREATE TABLE `formal-cascade-571.temp.tmp_sm_ddl2`
					OPTIONS(
					 description=\"Top ten words per Shakespeare corpus\"
					) AS
					SELECT
					 corpus,
					 ARRAY_AGG(STRUCT(word, word_count) ORDER BY word_count DESC LIMIT 10) AS top_words
					FROM `bigquery-public-data.samples.shakespeare`
					GROUP BY corpus; 
					 
					 
					##bq
					#standardSQL
					-- Creating a table only if the table doesn't exist
					CREATE TABLE IF NOT EXISTS  `formal-cascade-571.temp.tmp_sm_ddl2` (x INT64, y STRUCT<a ARRAY<STRING>, b BOOL>)
					OPTIONS(
					 expiration_timestamp=TIMESTAMP \"2020-01-01 00:00:00 UTC\",
					 description=\"a table that expires in 2020\",
					 labels=[(\"org_unit\", \"development\")]
					)
					
					##bq
					#standardSQL
					-- Creating or replacing a table
					CREATE OR REPLACE TABLE `formal-cascade-571.temp.tmp_sm_ddl3` (x INT64, y STRUCT<a ARRAY<STRING>, b BOOL>)
					OPTIONS(
					 expiration_timestamp=TIMESTAMP \"2020-01-01 00:00:00 UTC\",
					 description=\"a table that expires in 2020\",
					 labels=[(\"org_unit\", \"development\")]
					)
					
					##bq
					#standardSQL
					-- Creating a table with REQUIRED columns
					CREATE TABLE `formal-cascade-571.temp.tmp_sm_ddl4` (
					 x INT64 NOT NULL,
					 y STRUCT<
						 a ARRAY<STRING>,
						 b BOOL NOT NULL,
						 c FLOAT64
					 > NOT NULL,
					 z STRING
					)
					 
					##bq
					#standardSQL
					--Creating a partitioned table
					CREATE TABLE `formal-cascade-571.temp.tmp_sm_ddl5` (transaction_id INT64, transaction_date DATE)
					PARTITION BY transaction_date
					OPTIONS(
					 partition_expiration_days=3,
					 description=\"a table partitioned by transaction_date\"
					)
					
					##bq
					#standardSQL
					--Creating a partitioned table from the result of a query
					CREATE TABLE `formal-cascade-571.temp.tmp_sm_ddl6`
					PARTITION BY date
					OPTIONS (
					 partition_expiration_days=365,
					 description=\"weather stations with precipitation, partitioned by day\"
					) AS
					SELECT
					 DATE(CAST(year AS INT64), CAST(mo AS INT64), CAST(da AS INT64)) AS date,
					 (SELECT ANY_VALUE(name) FROM `bigquery-public-data.noaa_gsod.stations` AS stations
						WHERE stations.usaf = stn) AS station_name,  -- Stations may have multiple names
					 prcp
					FROM `bigquery-public-data.noaa_gsod.gsod2017` AS weather
					WHERE prcp != 99.9  -- Filter unknown values
					 AND prcp > 0      -- Filter stations/days with no precipitation
					
					##bq
					-- Creating a new view
					#standardSQL
					CREATE VIEW `formal-cascade-571.temp.tmp_sm_ddl_v1`
					OPTIONS(
					 expiration_timestamp=TIMESTAMP_ADD(CURRENT_TIMESTAMP(), INTERVAL 48 HOUR),
					 friendly_name=\"newview\",
					 description=\"a view that expires in 2 days\",
					 labels=[(\"org_unit\", \"development\")]
					)
					AS SELECT 'column_1' as c1, 'column_2' as c2, 'column_3' as c3
					
					##bq
					-- Creating a view only if the view doesn't exist
					#standardSQL
					CREATE VIEW IF NOT EXISTS `formal-cascade-571.temp.tmp_sm_ddl_v1`
					OPTIONS(
					 expiration_timestamp=TIMESTAMP_ADD(CURRENT_TIMESTAMP(), INTERVAL 48 HOUR),
					 friendly_name=\"newview\",
					 description=\"a view that expires in 2 days\",
					 labels=[(\"org_unit\", \"development\")]
					)
					AS SELECT 'column_1' as c1, 'column_2' as c2, 'column_3' as c3
					
					##bq
					-- Creating or replacing a view
					#standardSQL
					CREATE OR REPLACE VIEW `formal-cascade-571.temp.tmp_sm_ddl_v1`
					OPTIONS(
					 expiration_timestamp=TIMESTAMP_ADD(CURRENT_TIMESTAMP(), INTERVAL 48 HOUR),
					 friendly_name=\"newview\",
					 description=\"a view that expires in 1 days\",
					 labels=[(\"org_unit\", \"development\")]
					)
					AS SELECT 'column_1' as c1, 'column_2' as c2, 'column_3' as c3
					
					##bq
					-- Deleting a table
					DROP TABLE `formal-cascade-571.temp.tmp_sm_ddl1`
					
					##bq
					-- Deleting a table only if the table exists
					DROP TABLE IF EXISTS `formal-cascade-571.temp.tmp_sm_ddl1`
					
					##bq
					-- Deleting a view
					DROP VIEW `formal-cascade-571.temp.tmp_sm_ddl_v1`
					
					##bq
					-- Deleting a view only if the view exists
					DROP VIEW IF EXISTS `formal-cascade-571.temp.tmp_sm_ddl_v1`
					
					##bq
					-- models
					-- 
					#standardSQL
					CREATE MODEL `formal-cascade-571.temp.tmp_sm_natality_model2`
					OPTIONS
					  (model_type='linear_reg',
					    input_label_cols=['weight_pounds']) AS
					SELECT
					  weight_pounds,
					  is_male,
					  gestation_weeks,
					  mother_age,
					  CAST(mother_race AS string) AS mother_race
					FROM
					  `bigquery-public-data.samples.natality`
					WHERE
					  weight_pounds IS NOT NULL
					  AND RAND() < 0.001
					LIMIT 100
					
					##bq
					-- clean up
					drop table `formal-cascade-571.temp.tmp_sm_ddl`
					drop table `formal-cascade-571.temp.tmp_sm_ddl2`
					drop table `formal-cascade-571.temp.tmp_sm_ddl3`
					drop table `formal-cascade-571.temp.tmp_sm_ddl4`
					drop table `formal-cascade-571.temp.tmp_sm_ddl5`
					drop table `formal-cascade-571.temp.tmp_sm_ddl6`
					
					"
			},
			"options": {
				"mode": "standard",
				"autoUpdateSqlMode": false,
				"enhancedMode": false,
				"destinationTbl": "p.d.t",
				"retention": "",
				"retentionUnit": "days",
				"allowLargeResults": true,
				"flattenResults": true,
				"maximumBillingTier": "",
				"maximumBytes": "",
				"maximumBytesMultiplier": "3",
				"location": null
			}
		},
		"-tabs-8": {
			"tabname": "git - query3(2)",
			"query": {
				"allowLargeResults": true,
				"flattenResults": false,
				"useQueryCache": false,
				"destinationTable": {
					"projectId": "p",
					"datasetId": "d",
					"tableId": "t2"
				},
				"writeDisposition": "WRITE_TRUNCATE",
				"useLegacySql": true,
				"maximumBytesBilled": 2199023255552,
				"querytext": "##bq
					WITH trips AS (
						select pickup_datetime, pickup_longitude, pickup_latitude, dropoff_longitude, dropoff_latitude
						FROM `bigquery-public-data.new_york.tlc_yellow_trips_2016`
						WHERE pickup_longitude IS NOT NULL
						AND pickup_latitude IS NOT NULL
						AND dropoff_longitude IS NOT NULL
						AND dropoff_longitude IS NOT NULL
						AND EXTRACT(MONTH FROM pickup_datetime) = 1
						LIMIT 100000
					)
					SELECT *
					FROM trips
					WHERE pickup_longitude >= -90 AND pickup_longitude < 91
					AND pickup_latitude >= -90 AND pickup_latitude < 91
					AND dropoff_longitude >= -90 AND dropoff_longitude < 91
					AND dropoff_latitude >= -90 AND dropoff_latitude < 91
					AND pickup_longitude != 0
					AND dropoff_longitude != 0
					
					##bq
					WITH geo AS (
						SELECT 
							'Pickup' AS pickup_desc
							,'Dropoff' AS dropoff_desc
						  ,pickup_longitude
							,ST_GEOGPOINT(pickup_longitude, pickup_latitude) as pickup
							,ST_GEOGPOINT(dropoff_longitude, dropoff_latitude) as dropoff
					--		,ST_MAKELINE(ST_GEOGPOINT(pickup_longitude, pickup_latitude), ST_GEOGPOINT(dropoff_longitude, dropoff_latitude)) As pd 
						--	,ST_CENTROID(ST_MAKELINE(ST_GEOGPOINT(pickup_longitude, pickup_latitude), ST_GEOGPOINT(dropoff_longitude, dropoff_latitude))) AS centroid
						  ,ST_DISTANCE(ST_GEOGPOINT(pickup_longitude, pickup_latitude), ST_GEOGPOINT(dropoff_longitude, dropoff_latitude)) AS distance
						FROM `formal-cascade-571.temp.tmp_sm_geo`
					)
					SELECT
					  pickup_desc
						,dropoff_desc
						,pickup
						,dropoff
						,ST_MAKELINE(pickup, dropoff) As pd
						,distance/100 AS d
						,IF(distance/100 > 100, '#FF0000', if(distance/100 < 80, '#38761D', '#0000FF')) AS distance
					FROM geo
					WHERE distance/100 > 5
					ORDER BY pickup_longitude
					
					"
			},
			"options": {
				"mode": "legacy",
				"autoUpdateSqlMode": true,
				"enhancedMode": false,
				"destinationTbl": "p.d.t2",
				"retention": "1",
				"retentionUnit": "hours",
				"maximumBillingTier": "",
				"maximumBytes": "2",
				"maximumBytesMultiplier": "4",
				"location": null
			}
		},
		"-tabs-9": {
			"tabname": "git - query2(2)",
			"query": {
				"allowLargeResults": false,
				"flattenResults": true,
				"useQueryCache": false,
				"destinationTable": {
					"projectId": "p",
					"datasetId": "d",
					"tableId": "t3"
				},
				"writeDisposition": "WRITE_EMPTY",
				"useLegacySql": true,
				"maximumBytesBilled": 2251799813685248,
				"destinationEncryptionConfiguration": {
					"kmsKeyName": "xxx"
				},
				"querytext": "select a.zipcode, a.population
					from `bigquery-public-data.census_bureau_usa.population_by_zip_2010` a
					WHERE gender = ''
					ORDER bY 1
					
					
					##bq
					--33,119
					select a.zipcode, z.zipcode_geom, a.population
					from `bigquery-public-data.census_bureau_usa.population_by_zip_2010` a
					JOIN `bigquery-public-data.utility_us.zipcode_area` z
					ON z.zipcode = a.zipcode
					WHERE gender = ''
					ORDER bY 1
					
					##bq
					-- 13,013
					select a.zipcode, ST_GEOGFROMTEXT(za.zipcode_geom) AS zipcode_geom, a.population, ca.county_name, ca.county_geom
					from `bigquery-public-data.census_bureau_usa.population_by_zip_2010` a
					JOIN `bigquery-public-data.utility_us.zipcode_area` za
					ON za.zipcode = a.zipcode
					JOIN `bigquery-public-data.utility_us.us_county_area` ca
					ON ST_WITHIN(ST_GEOGFROMTEXT(za.zipcode_geom), ca.county_geom)
					WHERE gender = ''
					ORDER bY 1
					
					##bq
					-- 12,2936
					select a.zipcode, ST_GEOGFROMTEXT(za.zipcode_geom) AS zipcode_geom, a.population, ca.name, ca.csa_geom
					from `bigquery-public-data.census_bureau_usa.population_by_zip_2010` a
					JOIN `bigquery-public-data.utility_us.zipcode_area` za
					ON za.zipcode = a.zipcode
					JOIN `bigquery-public-data.utility_us.us_csa_area` ca
					ON ST_WITHIN(ST_GEOGFROMTEXT(za.zipcode_geom), ca.csa_geom)
					WHERE gender = ''
					ORDER bY 1
					
					##bq
					-- 14,880
					select a.zipcode, ST_GEOGFROMTEXT(za.zipcode_geom) AS zipcode_geom, a.population, ma.name, ma.msa_geom
					from `bigquery-public-data.census_bureau_usa.population_by_zip_2010` a
					JOIN `bigquery-public-data.utility_us.zipcode_area` za
					ON za.zipcode = a.zipcode
					JOIN `bigquery-public-data.utility_us.us_msa_area` ma
					ON ST_WITHIN(ST_GEOGFROMTEXT(za.zipcode_geom), ma.msa_geom)
					WHERE gender = ''
					ORDER bY 1
					
					##bq
					-- 29,474
					select a.zipcode, ST_GEOGFROMTEXT(za.zipcode_geom) AS zipcode_geom, a.population, sa.state_name, sa.state_geom
					from `bigquery-public-data.census_bureau_usa.population_by_zip_2010` a
					JOIN `bigquery-public-data.utility_us.zipcode_area` za
					ON za.zipcode = a.zipcode
					JOIN `bigquery-public-data.utility_us.us_states_area` sa
					ON ST_WITHIN(ST_GEOGFROMTEXT(za.zipcode_geom), sa.state_geom)
					WHERE gender = ''
					ORDER bY 1
					
					##bq
					
					"
			},
			"options": {
				"mode": "legacy",
				"autoUpdateSqlMode": true,
				"enhancedMode": false,
				"destinationTbl": "p.d.t3",
				"retention": "",
				"retentionUnit": "days",
				"maximumBillingTier": "",
				"maximumBytes": "2",
				"maximumBytesMultiplier": "5",
				"location": "us-west2"
			}
		},
		"-tabs-10": {
			"tabname": "git - query(2)",
			"query": {
				"useQueryCache": false,
				"useLegacySql": false,
				"querytext": "##bq /* point */
					/*
					blue #0000ff 
					green #00ff00
					*/
					SELECT ST_GEOGPOINT(longitude, latitude) AS geo, name, if(RAND() < .5, '#0000ff', '#00ff00') AS color, RAND() * 2 AS size
					FROM `bigquery-public-data.new_york_citibike.citibike_stations`
					LIMIT 500
					
					##bq /* line */
					SELECT ST_MAKELINE(ST_GEOGPOINT(start_station_longitude, start_station_latitude), 
					  ST_GEOGPOINT(end_station_longitude, end_station_latitude)) AS start_end, 
						start_station_name, 
						end_station_name
					FROM `bigquery-public-data.new_york_citibike.citibike_trips`
					LIMIT 50
					
					##bq /* polygon */
					-- `bigquery-public-data.utility_us.us_states_area`
					
					##bq /* multiple points */
					SELECT ST_GEOGPOINT(start_station_longitude, start_station_latitude) AS start_geo, 
					  ST_GEOGPOINT(end_station_longitude, end_station_latitude) AS end_geo, 
						start_station_name, 
						end_station_name
					FROM `bigquery-public-data.new_york_citibike.citibike_trips`
					LIMIT 50
					
					
					
					"
			},
			"options": {
				"mode": "standard",
				"autoUpdateSqlMode": false,
				"enhancedMode": false,
				"destinationTbl": "",
				"writeDisposition": "WRITE_EMPTY",
				"retention": "",
				"retentionUnit": "days",
				"allowLargeResults": false,
				"flattenResults": true,
				"maximumBillingTier": "",
				"maximumBytes": "",
				"maximumBytesMultiplier": "3",
				"location": null
			}
		}
	}
}